" Install vim-plug if not found
let data_dir = has('nvim') ? stdpath('data') . '/site' : '{{ .chezmoi.homeDir}}/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('{{ .chezmoi.homeDir}}/.vim/plugged')

" auto-complete
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" insert mode auto-completion, useful for quotes, parenthesis, brackets
Plug 'Raimondi/delimitMate'

" fuzzy file finder
{{ if eq .chezmoi.os "darwin" -}}
Plug '/usr/local/opt/fzf'
{{ else if eq .chezmoi.os "linux" -}}
Plug '/home/linuxbrew/.linuxbrew/opt/fzf'
{{- end }}

" languages and stuff
Plug 'cespare/vim-toml'
Plug 'hashivim/vim-terraform'
Plug 'Yggdroot/indentLine'
Plug 'godlygeek/tabular'
Plug 'dag/vim-fish'
Plug 'elzr/vim-json'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-endwise'
Plug 'ekalinin/Dockerfile.vim'
Plug 'pearofducks/ansible-vim', { 'do': './UltiSnips/generate.sh' }

" git integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" colourscheme
Plug 'arcticicestudio/nord-vim'
Plug 'itchyny/lightline.vim'

" misc - will find a home
Plug 'mhinz/vim-grepper'
Plug 'tmux-plugins/vim-tmux'
Plug 'vim-scripts/AutoComplPop'
call plug#end()


"  GENERAL Settings
"
set nocompatible
filetype off
filetype plugin indent on

" handle long lines nicely
set wrap
set textwidth=79
set formatoptions=qrn1

" set timeout on key codes but ignore mappings
set notimeout
set ttimeout
set ttimeoutlen=10

" ignore includes for completion
set complete-=i
set completeopt=longest,menuone

:silent! colorscheme nord
let mapleader=" "
let maplocalleader=" "

set autoread
au CursorHold * checktime
set backspace=indent,eol,start

set encoding=utf-8

set spelllang=en_ca
set complete+=kspell
set nospell
set noswapfile
set hidden

set laststatus=2
set number
set numberwidth=5
"set colorcolumn=+1
set cursorline
set noshowmode
set nostartofline

set virtualedit=block

set splitbelow
set splitright

set ttyfast
set mouse=a
set ttymouse=xterm2
set clipboard=unnamed

set undodir=/tmp
set undofile

" Set Whitespace
set tabstop=2 shiftwidth=2 shiftround expandtab   " tabs to spaces
set smarttab smartindent autoindent    " automagical indenting
set listchars=tab:▸\ ,eol:\            " show special characters
set indentkeys-=0#

set shortmess+=c

set nojoinspaces

set rtp+=/usr/local/opt/fzf

let g:lightline = {
  \ 'colorscheme': 'nord',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component': {
  \   'lineinfo': ' %3l:%-2v',
  \ },
  \ 'component_function': {
  \   'readonly': 'LightlineReadonly',
  \   'fugitive': 'LightlineFugitive'
  \ },
  \ 'separator': { 'left' : '', 'right' : '' },
  \ 'subseparator': { 'left' : '', 'right' : '' }
  \ }


function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

let g:gitgutter_sign_added = '│'
let g:gitgutter_sign_modified = '│'
let g:gitgutter_sign_removed = '│'
let g:gitgutter_sign_removed_first_line = '│'
let g:gitgutter_sign_modified_removed = '│'

highlight link GitGutterAdd DiffAdd
highlight link GitGutterDelete DiffDelete
highlight link GitGutterChange DiffChange

set fcs=vert:│

" File Browser
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 18

function! ToggleNetrw()
  let i = bufnr("$")
  let wasOpen = 0
  while (i >= 1)
    if (getbufvar(i, "&filetype") == "netrw")
      silent exe "bwipeout " . i
      let wasOpen = 1
    endif
    let i-=1
  endwhile
  if !wasOpen
    silent Lexplore
  endif
endfunction
noremap <silent> <C-n> :call ToggleNetrw() <CR>

"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END

" Navigate the complete menu items like CTRL+n / CTRL+p would.
"inoremap <expr> <Down> pumvisible() ? "<C-n>" : "<Down>"
"inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like CTRL+y would.
"inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
"inoremap <expr> <CR> pumvisible() ? "<C-y>" : "<CR>"

" Cancel the complete menu item like CTRL+e would.
"inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

" Edit Vim config file in a new tab.
map <Leader>ev :tabnew $MYVIMRC<CR>

" Source Vim config file.
map <Leader>sv :source $MYVIMRC<CR>

" Tab navigation like Firefox.
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-S-tab> :tabprevious<CR>
inoremap <C-t>     <Esc>:tabnew<CR>
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-S-tab> <Esc>:tabprevious<CR>i

" .............................................................................
" junegunn/fzf.vim
"
" .............................................................................

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

" Launch fzf with CTRL+P.
nnoremap <silent> <C-p> :FZF -m<CR>

" Map a few common things to do with FZF.
nnoremap <silent> <Leader><Enter> :Buffers<CR>
nnoremap <silent> <Leader>l :Lines<CR>

" Allow passing optional flags into the Rg command.
"   Example: :Rg myterm -g '*.md'
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case " . <q-args>, 1, <bang>0)

" -----------------------------------------------------------------------------
" Basic autocommands
"
" -----------------------------------------------------------------------------

" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Set Defaults for various file types
au FileType yaml setlocal ts=2 sw=2 expandtab
au FileType markdown setlocal ts=4 sw=4 spell noet
au FileType gitcommit setlocal spell


" Only show the cursor line in the active buffer.
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" terraform
let g:terraform_align=1

" indentLine configuration
let g:indentLine_char = '⦙'
let g:indentLine_concealcursor = 0
